// <auto-generated />
using System;
using LoanApplicationWebAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LoanApplicationWebAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LoanApplicationWebAPI.Models.LoanApplication", b =>
                {
                    b.Property<int>("LoanApplicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LoanApplicationId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<decimal>("LoanAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("LoanOfficerId")
                        .HasColumnType("int");

                    b.Property<int>("LoanSchemeId")
                        .HasColumnType("int");

                    b.Property<int>("LoanType")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("LoanApplicationId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("LoanOfficerId");

                    b.HasIndex("LoanSchemeId");

                    b.ToTable("LoanApplications");
                });

            modelBuilder.Entity("LoanApplicationWebAPI.Models.LoanApproved", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Installment")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsNPA")
                        .HasColumnType("bit");

                    b.Property<int>("LoanApplicationId")
                        .HasColumnType("int");

                    b.Property<int>("NoOfPayments")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("LoanApplicationId")
                        .IsUnique();

                    b.ToTable("LoanApproved");
                });

            modelBuilder.Entity("LoanApplicationWebAPI.Models.LoanScheme", b =>
                {
                    b.Property<int>("LoanSchemeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LoanSchemeId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("InterestRate")
                        .HasColumnType("decimal(5,2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("SchemeName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("SchemeType")
                        .HasColumnType("int");

                    b.Property<int>("TenureInMonths")
                        .HasColumnType("int");

                    b.HasKey("LoanSchemeId");

                    b.ToTable("LoanSchemes");
                });

            modelBuilder.Entity("LoanApplicationWebAPI.Models.Repayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ApprovedLoanId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("InstallmentNumber")
                        .HasColumnType("int");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("PaidDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedLoanId");

                    b.ToTable("Repayments");
                });

            modelBuilder.Entity("LoanApplicationWebAPI.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserRoleType")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasDiscriminator<int>("UserRoleType");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("LoanApplicationWebAPI.Models.Customer", b =>
                {
                    b.HasBaseType("LoanApplicationWebAPI.Models.User");

                    b.Property<string>("AadharId")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("PanId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("LoanApplicationWebAPI.Models.LoanAdmin", b =>
                {
                    b.HasBaseType("LoanApplicationWebAPI.Models.User");

                    b.HasDiscriminator().HasValue(0);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Email = "admin@loanapp.com",
                            FirstName = "Admin",
                            LastName = "Admin",
                            PasswordHash = "Admin@123",
                            UserName = "ADMIN_001",
                            UserRoleType = 0
                        });
                });

            modelBuilder.Entity("LoanApplicationWebAPI.Models.LoanOfficer", b =>
                {
                    b.HasBaseType("LoanApplicationWebAPI.Models.User");

                    b.Property<string>("Branch")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("OfficerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("LoanApplicationWebAPI.Models.LoanApplication", b =>
                {
                    b.HasOne("LoanApplicationWebAPI.Models.Customer", "Customer")
                        .WithMany("LoanApplications")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LoanApplicationWebAPI.Models.LoanOfficer", "LoanOfficer")
                        .WithMany("AssignedApplications")
                        .HasForeignKey("LoanOfficerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LoanApplicationWebAPI.Models.LoanScheme", "LoanScheme")
                        .WithMany("LoanApplications")
                        .HasForeignKey("LoanSchemeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("LoanOfficer");

                    b.Navigation("LoanScheme");
                });

            modelBuilder.Entity("LoanApplicationWebAPI.Models.LoanApproved", b =>
                {
                    b.HasOne("LoanApplicationWebAPI.Models.LoanApplication", "LoanApplication")
                        .WithOne("LoanApproved")
                        .HasForeignKey("LoanApplicationWebAPI.Models.LoanApproved", "LoanApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LoanApplication");
                });

            modelBuilder.Entity("LoanApplicationWebAPI.Models.Repayment", b =>
                {
                    b.HasOne("LoanApplicationWebAPI.Models.LoanApproved", "ApprovedLoan")
                        .WithMany("Repayments")
                        .HasForeignKey("ApprovedLoanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApprovedLoan");
                });

            modelBuilder.Entity("LoanApplicationWebAPI.Models.LoanApplication", b =>
                {
                    b.Navigation("LoanApproved");
                });

            modelBuilder.Entity("LoanApplicationWebAPI.Models.LoanApproved", b =>
                {
                    b.Navigation("Repayments");
                });

            modelBuilder.Entity("LoanApplicationWebAPI.Models.LoanScheme", b =>
                {
                    b.Navigation("LoanApplications");
                });

            modelBuilder.Entity("LoanApplicationWebAPI.Models.Customer", b =>
                {
                    b.Navigation("LoanApplications");
                });

            modelBuilder.Entity("LoanApplicationWebAPI.Models.LoanOfficer", b =>
                {
                    b.Navigation("AssignedApplications");
                });
#pragma warning restore 612, 618
        }
    }
}
